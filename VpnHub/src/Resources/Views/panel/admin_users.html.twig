{% extends 'base.html.twig' %}

{% block page_title %}Gestão de Funcionários{% endblock %}

{% block content %}

<div class="flex justify-between mb-4">
  <h2 class="text-2xl font-semibold text-indigo-700">Funcionários</h2>
  <button id="novoFuncionarioBtn" type="button" class="bg-indigo-600 text-white rounded hover:bg-indigo-700 px-4 py-2">Novo Funcionário</button>
</div>

<div class="mb-4">
    {% include 'partials/_alerts.html.twig' %}
</div>

<form action="administrar-usuarios" method="GET" class="mb-4 w-full sm:w-1/3">
  <input
    type="text"
    name="username"
    placeholder="Buscar por nome..."
    value="{{ searchTerm }}"
    class="border px-3 py-2 rounded w-full"
  />
</form>

<div class="overflow-x-auto">
  <div class="mt-4 space-x-2">
    <button id="editarBtn" type="button" class="bg-green-600 text-white rounded hover:bg-green-700 px-4 py-2">Editar</button>
  </div>

  <table class="min-w-full border-collapse w-full">
    <thead class="bg-indigo-100">
      <tr>
        <th class="text-left px-4 py-1"></th>

        {% set currentOrder = currentOrder|default('name') %}
        {% set currentDirection = currentDirection|default('asc') %}
        {% set baseParams = '' %}
        {% if searchTerm %}{% set baseParams = baseParams ~ '&username=' ~ searchTerm %}{% endif %}
        {% if users.page %}{% set baseParams = baseParams ~ '&page=' ~ users.page %}{% endif %}

        {% set columns = {
          'name': 'Nome',
          'username': 'Username',
          'isAdmin': 'Administrador'
        } %}

        {% for col, label in columns %}
          {% set isCurrent = (currentOrder == col) %}
          {% set newDirection = isCurrent and currentDirection == 'asc' ? 'desc' : 'asc' %}
          <th class="text-left px-4 py-1">
            <a href="?orderBy={{ col }}&direction={{ newDirection }}{{ baseParams }}"
               class="hover:underline {{ isCurrent ? 'text-red-600 font-semibold' : 'text-black' }}">
              {{ label }}
              {% if isCurrent %}
                <span class="ml-1">
                  {% if currentDirection == 'asc' %}
                    &uarr;
                  {% else %}
                    &darr;
                  {% endif %}
                </span>
              {% endif %}
            </a>
          </th>
        {% endfor %}
      </tr>
    </thead>
    <tbody>
      {% for user in users['data'] %}
      <tr class="border-t hover:bg-indigo-50">
        <td class="px-4 py-2">
          <input type="checkbox" name="select_user[]" value="{{ user.id }}" data-username="{{ user.username }}">
        </td>
        <td class="px-4 py-2">{{ user.name }}</td>
        <td class="px-4 py-2">{{ user.username }}</td>
        <td class="px-4 py-2">
          {{ user.isAdmin ? 'Sim' : 'Não' }}
        </td>
      </tr>
      {% else %}
      <tr>
        <td colspan="4" class="px-4 py-2 text-center text-gray-500">Nenhum funcionário encontrado.</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>

{% if users.pages > 1 %}
<nav class="mt-4 flex justify-center space-x-2">
  {% set directionParam = currentDirection|default('asc')|trim %}
  {% if users.page > 1 %}
    <a href="?page={{ users.page - 1 }}&username={{ searchTerm }}&orderBy={{ currentOrder }}&direction={{ directionParam }}" class="px-3 py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700">&laquo; Anterior</a>
  {% else %}
    <span class="px-3 py-1 bg-gray-300 text-gray-600 rounded cursor-not-allowed">&laquo; Anterior</span>
  {% endif %}

  {% for i in 1..users.pages %}
    {% if i == users.page %}
      <span class="px-3 py-1 bg-indigo-700 text-white rounded font-bold">{{ i }}</span>
    {% else %}
      <a href="?page={{ i }}&username={{ searchTerm }}&orderBy={{ currentOrder }}&direction={{ directionParam }}" class="px-3 py-1 bg-indigo-200 text-indigo-700 rounded hover:bg-indigo-300">{{ i }}</a>
    {% endif %}
  {% endfor %}

  {% if users.page < users.pages %}
    <a href="?page={{ users.page + 1 }}&username={{ searchTerm }}&orderBy={{ currentOrder }}&direction={{ directionParam }}" class="px-3 py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700">Próxima &raquo;</a>
  {% else %}
    <span class="px-3 py-1 bg-gray-300 text-gray-600 rounded cursor-not-allowed">Próxima &raquo;</span>
  {% endif %}
</nav>
{% endif %}

<div id="editSidebar" class="fixed top-0 left-0 w-64 h-full bg-gray-100 shadow-xl p-4 transform -translate-x-full transition-transform duration-300">
  <div class="flex justify-between items-center mb-4">
    <h3 class="text-lg font-semibold">Editar Selecionados</h3>
    <button id="closeSidebar" type="button" class="text-gray-600 hover:text-gray-800">&times;</button>
  </div>

  <ul id="selectedUsers" class="mb-4 space-y-1 text-sm text-gray-700"></ul>

  <div class="space-y-2">
    <button type="button" class="action-btn w-full text-left px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700" data-action="/administrar-usuarios/eleger-admin">Eleger como Administrador</button>
    <button type="button" class="action-btn w-full text-left px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600" data-action="/administrar-usuarios/revogar-admin">Revogar Administrador</button>
    <button type="button" class="action-btn w-full text-left px-3 py-2 bg-green-600 text-white rounded hover:bg-green-700" data-action="/administrar-usuarios/ativar-acesso">Ativar Acesso</button>
    <button type="button" class="action-btn w-full text-left px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600" data-action="/administrar-usuarios/revogar-acesso">Revogar Acesso</button>
    <button type="button" class="action-btn w-full text-left px-3 py-2 bg-gray-700 text-white rounded hover:bg-gray-800" data-action="/administrar-usuarios/remover-usuarios">Remover Cadastro</button>
  </div>

  <div id="actionFeedback" class="mt-4 text-sm text-center"></div>
</div>

<div id="novoFuncionarioModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
  <div class="bg-white p-6 rounded shadow-xl w-full max-w-md">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-semibold">Novo Funcionário</h3>
      <button id="closeNovoFuncionario" type="button" class="text-gray-600 hover:text-gray-800">&times;</button>
    </div>

    <form action="/administrar-usuarios/criar" method="POST" class="space-y-4">
      <div>
        <label class="block text-sm font-medium">Nome Completo</label>
        <input type="text" name="name" required class="border px-3 py-2 rounded w-full">
      </div>

      <div>
        <label class="block text-sm font-medium">Username</label>
        <input type="text" name="username" required class="border px-3 py-2 rounded w-full">
      </div>

      <div>
        <label class="block text-sm font-medium">Senha</label>
        <input type="password" name="password" required class="border px-3 py-2 rounded w-full">
      </div>

      <div>
        <label class="block text-sm font-medium">Email</label>
        <div class="flex">
          <input type="text" name="email_prefix" required class="border px-3 py-2 rounded-l w-full">
          <span class="inline-flex items-center px-3 py-2 border border-l-0 rounded-r bg-gray-100 text-gray-600">@juan.com.br</span>
        </div>
      </div>

      <div class="flex items-center">
        <input type="checkbox" name="is_admin" id="is_admin" class="mr-2">
        <label for="is_admin" class="text-sm">Administrador?</label>
      </div>

      <button type="submit" class="w-full bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700">Criar</button>
    </form>
  </div>
</div>

<script>
  const editarBtn = document.getElementById('editarBtn');
  const sidebar = document.getElementById('editSidebar');
  const closeSidebar = document.getElementById('closeSidebar');
  const selectedUsersList = document.getElementById('selectedUsers');
  const actionButtons = document.querySelectorAll('.action-btn');
  const novoFuncionarioBtn = document.getElementById('novoFuncionarioBtn');
  const novoFuncionarioModal = document.getElementById('novoFuncionarioModal');
  const closeNovoFuncionario = document.getElementById('closeNovoFuncionario');
  const actionFeedback = document.getElementById('actionFeedback');

  let selectedIds = [];

  editarBtn.addEventListener('click', () => {
    const checkboxes = document.querySelectorAll('input[name="select_user[]"]:checked');
    selectedUsersList.innerHTML = '';
    selectedIds = [];

    if (checkboxes.length === 0) {
      alert('Selecione pelo menos um funcionário para editar.');
      return;
    }

    checkboxes.forEach(cb => {
      selectedIds.push(cb.value);
      const li = document.createElement('li');
      li.textContent = cb.dataset.username;
      selectedUsersList.appendChild(li);
    });

    sidebar.classList.remove('-translate-x-full');
    actionFeedback.textContent = '';
  });

  closeSidebar.addEventListener('click', () => {
    sidebar.classList.add('-translate-x-full');
  });

  actionButtons.forEach(button => {
    button.addEventListener('click', (event) => {
      event.preventDefault();
      event.stopPropagation();

      if (selectedIds.length === 0) {
        alert('Nenhum funcionário selecionado.');
        return;
      }

      const actionUrl = button.dataset.action;

      if (!confirm('Tem certeza que deseja realizar esta ação?')) {
        return;
      }

      const originalText = button.textContent;
      button.disabled = true;
      button.textContent = 'Processando...';

      fetch(actionUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userIds: selectedIds })
      })
      .then(response => {
        if (response.ok) {
          actionFeedback.textContent = '✅ Ação realizada com sucesso! A página será recarregada';
          actionFeedback.classList.remove('text-red-500');
          actionFeedback.classList.add('text-green-600');
          setTimeout(() => window.location.reload(), 3000);
        } else {
          throw new Error('Erro na requisição');
        }
      })
      .catch(error => {
        console.error('Erro:', error);
        actionFeedback.textContent = '❌ Erro ao realizar a ação.';
        actionFeedback.classList.remove('text-green-600');
        actionFeedback.classList.add('text-red-500');
      })
      .finally(() => {
        button.disabled = false;
        button.textContent = originalText;
      });
    });
  });

  novoFuncionarioBtn.addEventListener('click', () => {
    novoFuncionarioModal.classList.remove('hidden');
  });

  closeNovoFuncionario.addEventListener('click', () => {
    novoFuncionarioModal.classList.add('hidden');
  });

  const allCheckboxes = document.querySelectorAll('input[name="select_user[]"]');
  allCheckboxes.forEach(cb => {
    cb.addEventListener('change', () => {
      sidebar.classList.add('-translate-x-full');
      selectedUsersList.innerHTML = '';
      selectedIds = [];
    });
  });
</script>

{% endblock %}
