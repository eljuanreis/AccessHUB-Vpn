{% extends 'base.html.twig' %}

{% block page_title %}Configurações VPN{% endblock %}

{% block content %}
<div class="flex justify-between mb-4">
  <input id="buscaInput" type="text" placeholder="Buscar por identificador ou data..." class="border px-3 py-2 rounded w-full sm:w-1/3">
  <button id="novaConfigBtn" class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700">Nova Configuração</button>
</div>

<table class="min-w-full bg-white rounded-xl shadow overflow-hidden table-auto">
  <thead class="bg-indigo-100">
    <tr>
      <th class="px-4 py-2 text-left align-middle"></th>
      <th class="px-4 py-2 text-left align-middle">Identificador</th>
      <th class="px-4 py-2 text-left align-middle">Criado em</th>
      <th class="px-4 py-2 text-left align-middle">Validade</th>
      <th class="px-4 py-2 text-left align-middle">Download</th>
    </tr>
  </thead>
  <tbody>
    {% for config in configs['data'] %}
    <tr class="border-t hover:bg-indigo-50">
      <td class="px-4 py-2 align-middle">
        <input type="checkbox" name="selected_configs[]" value="{{ config.identifier }}">
      </td>
      <td class="px-4 py-2 font-mono align-middle">{{ config.identifier }}</td>
      <td class="px-4 py-2 align-middle">{{ config.createdAt|date('d/m/Y H:i') }}</td>
      <td class="px-4 py-2 align-middle">{{ config.validUntil ? config.validUntil|date('d/m/Y H:i') : '-' }}</td>
      <td class="px-4 py-2 align-middle">
        <a href="{{ config.getDownloadLink() }}" class="text-indigo-600 hover:underline">Baixar</a>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>

<div class="mt-4">
  <button id="excluirSelecionadosBtn" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
    Excluir Selecionados
  </button>
</div>

<!-- Modal Confirmar Criação -->
<div id="confirmModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
  <div class="bg-white p-6 rounded shadow-xl w-full max-w-sm text-center">
    <h3 class="text-lg font-semibold mb-4">Confirmar Certificado</h3>
    <p class="mb-6">Deseja realmente confirmar o certificado? Ele será válido por 7 dias.</p>
    <div class="flex justify-center space-x-4">
      <button id="confirmBtn" class="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700">Confirmar</button>
      <button id="cancelBtn" class="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">Cancelar</button>
    </div>
    <p id="modalFeedback" class="mt-4 text-sm"></p>
  </div>
</div>

<!-- Modal Confirmar Exclusão -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
  <div class="bg-white p-6 rounded shadow-xl w-full max-w-sm text-center">
    <h3 class="text-lg font-semibold mb-4">Confirmar Exclusão</h3>
    <p id="deleteText" class="mb-6 text-sm"></p>
    <div class="flex justify-center space-x-4">
      <button id="deleteConfirmBtn" class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">Sim</button>
      <button id="deleteCancelBtn" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">Não</button>
    </div>
    <p id="deleteFeedback" class="mt-4 text-sm"></p>
  </div>
</div>

<script>
  const novaConfigBtn = document.getElementById('novaConfigBtn');
  const confirmModal = document.getElementById('confirmModal');
  const confirmBtn = document.getElementById('confirmBtn');
  const cancelBtn = document.getElementById('cancelBtn');
  const modalFeedback = document.getElementById('modalFeedback');

  novaConfigBtn.addEventListener('click', () => {
    modalFeedback.textContent = '';
    confirmModal.classList.remove('hidden');
  });

  cancelBtn.addEventListener('click', () => {
    confirmModal.classList.add('hidden');
  });

  confirmBtn.addEventListener('click', () => {
    confirmBtn.disabled = true;
    confirmBtn.textContent = 'Processando...';
    modalFeedback.textContent = '';

    fetch('/vpn', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({})
    })
    .then(response => {
      if (!response.ok) throw new Error('Erro na requisição');
      return response.json();
    })
    .then(data => {
      modalFeedback.textContent = '✅ Certificado criado com sucesso!';
      modalFeedback.classList.remove('text-red-500');
      modalFeedback.classList.add('text-green-600');

      setTimeout(() => {
        confirmModal.classList.add('hidden');
        confirmBtn.disabled = false;
        confirmBtn.textContent = 'Confirmar';
        // window.location.reload();
      }, 2000);
    })
    .catch(error => {
      modalFeedback.textContent = '❌ Erro ao criar certificado.';
      modalFeedback.classList.remove('text-green-600');
      modalFeedback.classList.add('text-red-500');
      confirmBtn.disabled = false;
      confirmBtn.textContent = 'Confirmar';
      console.error(error);
    });
  });

  confirmModal.addEventListener('click', (e) => {
    if (e.target === confirmModal) {
      confirmModal.classList.add('hidden');
    }
  });

  // Exclusão
  const excluirBtn = document.getElementById('excluirSelecionadosBtn');
  const deleteModal = document.getElementById('deleteModal');
  const deleteText = document.getElementById('deleteText');
  const deleteConfirmBtn = document.getElementById('deleteConfirmBtn');
  const deleteCancelBtn = document.getElementById('deleteCancelBtn');
  const deleteFeedback = document.getElementById('deleteFeedback');

  excluirBtn.addEventListener('click', () => {
    const checkboxes = document.querySelectorAll('input[name="selected_configs[]"]:checked');
    const identifiers = Array.from(checkboxes).map(cb => {
      const row = cb.closest('tr');
      return row.querySelector('td:nth-child(2)').textContent.trim();
    });

    if (identifiers.length === 0) return;

    deleteText.textContent = `Você realmente deseja excluir os arquivos ${identifiers.join(' e ')}?`;
    deleteModal.classList.remove('hidden');

    deleteConfirmBtn.onclick = () => {
      deleteConfirmBtn.disabled = true;
      deleteConfirmBtn.textContent = 'Processando...';
      deleteFeedback.textContent = '';

      fetch('/vpn/delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({ identifiers })
      })
      .then(res => {
        if (!res.ok) throw new Error('Erro na exclusão');
        return res.json();
      })
      .then(() => {
        deleteFeedback.textContent = '✅ Exclusão realizada com sucesso.';
        deleteFeedback.classList.add('text-green-600');
        setTimeout(() => window.location.reload(), 1500);
      })
      .catch(err => {
        deleteFeedback.textContent = '❌ Falha ao excluir os arquivos.';
        deleteFeedback.classList.add('text-red-500');
        console.error(err);
        deleteConfirmBtn.disabled = false;
        deleteConfirmBtn.textContent = 'Sim';
      });
    };

    deleteCancelBtn.onclick = () => {
      deleteModal.classList.add('hidden');
    };

    deleteModal.addEventListener('click', (e) => {
      if (e.target === deleteModal) {
        deleteModal.classList.add('hidden');
      }
    });
  });

  // Busca
  const buscaInput = document.getElementById('buscaInput');
  buscaInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      const valorBusca = buscaInput.value.trim();
      if (valorBusca.length > 0) {
        window.location.href = `/vpn?q=${encodeURIComponent(valorBusca)}`;
      }
    }
  });
</script>
{% endblock %}
